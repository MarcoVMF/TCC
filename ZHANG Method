{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11316276,"sourceType":"datasetVersion","datasetId":7078326}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport torch\nimport torch.optim as optim\nimport torch.nn as nn\nimport torchvision\nfrom torchvision.transforms import v2","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:32.727581Z","iopub.execute_input":"2025-04-23T14:25:32.727839Z","iopub.status.idle":"2025-04-23T14:25:32.731772Z","shell.execute_reply.started":"2025-04-23T14:25:32.727820Z","shell.execute_reply":"2025-04-23T14:25:32.731062Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:32.909671Z","iopub.execute_input":"2025-04-23T14:25:32.910104Z","iopub.status.idle":"2025-04-23T14:25:32.913601Z","shell.execute_reply.started":"2025-04-23T14:25:32.910085Z","shell.execute_reply":"2025-04-23T14:25:32.912891Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"image_size = (128, 128)\nbatch = 128\nepochs = 50","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:33.170881Z","iopub.execute_input":"2025-04-23T14:25:33.171161Z","iopub.status.idle":"2025-04-23T14:25:33.175213Z","shell.execute_reply.started":"2025-04-23T14:25:33.171142Z","shell.execute_reply":"2025-04-23T14:25:33.174564Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"transform = v2.Compose([\n    v2.Resize(image_size),\n    v2.ToTensor(),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:33.435881Z","iopub.execute_input":"2025-04-23T14:25:33.436106Z","iopub.status.idle":"2025-04-23T14:25:33.439783Z","shell.execute_reply.started":"2025-04-23T14:25:33.436090Z","shell.execute_reply":"2025-04-23T14:25:33.439211Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"dataset = torchvision.datasets.ImageFolder(\"/kaggle/input/real-and-fake-images/dataset/train\", transform=transform)\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=128, shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:33.675222Z","iopub.execute_input":"2025-04-23T14:25:33.675468Z","iopub.status.idle":"2025-04-23T14:25:35.267264Z","shell.execute_reply.started":"2025-04-23T14:25:33.675451Z","shell.execute_reply":"2025-04-23T14:25:35.266692Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"class MainNet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.layers = nn.ModuleList([\n            # -> [b, 3, 128, 128]\n            nn.Conv2d(3, 32, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(32),\n            # -> [b, 32, 64, 64]\n            nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(64),\n            # -> [b, 64, 32, 32]\n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(128),\n            # -> [b, 128, 16, 16]\n            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(256),\n            # -> [b, 256, 8, 8]\n            nn.Flatten(),\n            nn.Linear(256*8*8, 1024),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm1d(1024),\n            \n            nn.Linear(1024, 1)\n        ])\n\n    def forward(self, x):\n        for layers in self.layers:\n            x = layers(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:36.342093Z","iopub.execute_input":"2025-04-23T14:25:36.342352Z","iopub.status.idle":"2025-04-23T14:25:36.348296Z","shell.execute_reply.started":"2025-04-23T14:25:36.342331Z","shell.execute_reply":"2025-04-23T14:25:36.347577Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"class AuxNet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.layers = nn.ModuleList([\n            # -> [b, 3, 128, 128]\n            nn.Conv2d(3, 32, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(32),\n            # -> [b, 32, 64, 64]\n            nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(64),\n            # -> [b, 64, 32, 32]\n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(128),\n            # -> [b, 128, 16, 16]\n            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm2d(256),\n            # -> [b, 256, 8, 8]\n            nn.Flatten(),\n            nn.Linear(256*8*8, 1024),\n            nn.LeakyReLU(0.2),\n            nn.BatchNorm1d(1024),\n            \n            nn.Linear(1024, 1)\n        ])\n\n    def forward(self, x):\n        for layers in self.layers:\n            x = layers(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:38.840264Z","iopub.execute_input":"2025-04-23T14:25:38.840788Z","iopub.status.idle":"2025-04-23T14:25:38.846646Z","shell.execute_reply.started":"2025-04-23T14:25:38.840765Z","shell.execute_reply":"2025-04-23T14:25:38.846020Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"mainNet = MainNet().to(device)\nauxNet = AuxNet().to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:40.942690Z","iopub.execute_input":"2025-04-23T14:25:40.942933Z","iopub.status.idle":"2025-04-23T14:25:41.318424Z","shell.execute_reply.started":"2025-04-23T14:25:40.942915Z","shell.execute_reply":"2025-04-23T14:25:41.317608Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"def build_route(main_layers, aux_layers, route_type):\n    seq = []\n    if route in (1, 2):\n        for i, (main_l, aux_l) in enumerate(zip(main_layers, aux_layers)):\n            if route_type == 1:\n                if i % 2 == 0:\n                    seq.append(aux_l)\n                else:\n                    seq.append(main_l)\n    \n            if route_type == 2:\n                if i % 2 == 0:\n                    seq.append(main_l)\n                else:\n                    seq.append(aux_l)\n    else:\n        seq = main_layers\n\n    return nn.Sequential(*seq), seq","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:41.319354Z","iopub.execute_input":"2025-04-23T14:25:41.319608Z","iopub.status.idle":"2025-04-23T14:25:41.325707Z","shell.execute_reply.started":"2025-04-23T14:25:41.319587Z","shell.execute_reply":"2025-04-23T14:25:41.324859Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"routes = [1, 2, 3]\n\nall_params = list(mainNet.parameters()) + list(auxNet.parameters())\n\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(all_params, lr=1e-3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:42.785869Z","iopub.execute_input":"2025-04-23T14:25:42.786522Z","iopub.status.idle":"2025-04-23T14:25:42.790728Z","shell.execute_reply.started":"2025-04-23T14:25:42.786500Z","shell.execute_reply":"2025-04-23T14:25:42.790161Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"for epoch in range(1, epochs+1):\n    for images, labels in dataloader:\n        images, labels = images.to(device), labels.to(device)\n        Ls = {}\n        for route in routes:\n            \n            submodel, layers = build_route(list(mainNet.layers), list(auxNet.layers), route)\n\n            for p in all_params:\n                p.requires_grad = False\n            for l in layers:\n                for p in l.parameters():\n                    p.requires_grad = True\n\n            out = submodel(images)\n            loss = criterion(out.squeeze(1), labels.float())\n\n            Ls[f'L{route}'] = loss\n\n        L1, L2, L3 = Ls[\"L1\"], Ls[\"L2\"], Ls[\"L3\"]\n        \n        alpha = 2 * L3.detach() / (L1.detach() + L2.detach() + 1e-8)\n        loss_total = alpha * (L1 + L2) + L3\n        \n        optimizer.zero_grad()\n        loss_total.backward()\n        optimizer.step()\n\n    print(f\"[{epoch}/{epochs}] Loss: {loss_total}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T14:25:42.925264Z","iopub.execute_input":"2025-04-23T14:25:42.925652Z","iopub.status.idle":"2025-04-23T15:03:02.466041Z","shell.execute_reply.started":"2025-04-23T14:25:42.925633Z","shell.execute_reply":"2025-04-23T15:03:02.465011Z"}},"outputs":[{"name":"stdout","text":"[1/50] Loss: 0.42451387643814087\n[2/50] Loss: 0.4093294143676758\n[3/50] Loss: 0.28143829107284546\n[4/50] Loss: 0.21164008975028992\n[5/50] Loss: 0.3823699355125427\n[6/50] Loss: 0.3142041563987732\n[7/50] Loss: 0.1538689285516739\n[8/50] Loss: 0.18102575838565826\n[9/50] Loss: 0.3541024923324585\n[10/50] Loss: 0.02441166341304779\n[11/50] Loss: 0.09900317341089249\n[12/50] Loss: 0.207503542304039\n[13/50] Loss: 0.07966826856136322\n[14/50] Loss: 0.053145356476306915\n[15/50] Loss: 0.5597484111785889\n[16/50] Loss: 0.056862376630306244\n[17/50] Loss: 0.011682025156915188\n[18/50] Loss: 0.035525910556316376\n[19/50] Loss: 0.004942586645483971\n[20/50] Loss: 0.0008426179410889745\n[21/50] Loss: 0.0007078576018102467\n[22/50] Loss: 0.0026299573946744204\n[23/50] Loss: 0.025841355323791504\n[24/50] Loss: 0.0033802385441958904\n[25/50] Loss: 0.0013297498226165771\n[26/50] Loss: 0.007111052051186562\n[27/50] Loss: 0.1352502554655075\n[28/50] Loss: 0.006136531475931406\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/1730184878.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataloader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m         \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mLs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mroute\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mroutes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    699\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    700\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 701\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    755\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    243\u001b[0m         \"\"\"\n\u001b[1;32m    244\u001b[0m         \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 245\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    246\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m             \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mdefault_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    282\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0maccimage_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    283\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 284\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpil_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    286\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mpil_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"RGB\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    265\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mconvert\u001b[0;34m(self, mode, matrix, dither, palette, colors)\u001b[0m\n\u001b[1;32m    982\u001b[0m             \u001b[0mdeprecate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 984\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    985\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    986\u001b[0m         \u001b[0mhas_transparency\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"transparency\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/PIL/ImageFile.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    299\u001b[0m                             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 300\u001b[0;31m                             \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    301\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    302\u001b[0m                                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":30},{"cell_type":"code","source":"val_dataset = torchvision.datasets.ImageFolder(\"/kaggle/input/real-and-fake-images/dataset/validation\", transform=transform)\nval_loader = torch.utils.data.DataLoader(val_dataset, batch_size=128, shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:04:11.951751Z","iopub.execute_input":"2025-04-23T15:04:11.952241Z","iopub.status.idle":"2025-04-23T15:04:13.382318Z","shell.execute_reply.started":"2025-04-23T15:04:11.952217Z","shell.execute_reply":"2025-04-23T15:04:13.381736Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"mainNet.eval()\nauxNet.eval()\nval_loss = 0.0\ncorrect = 0\ntotal = 0\n\nwith torch.no_grad():\n    for images, labels in val_loader:\n        images, labels = images.to(device), labels.to(device).float()\n\n        # Resultado do último route (por exemplo, route 3)\n        submodel, _ = build_route(list(mainNet.layers), list(auxNet.layers), route_type=3)\n        outputs = submodel(images).squeeze(1)\n        \n        loss = criterion(outputs, labels)\n        val_loss += loss.item()\n\n        preds = torch.sigmoid(outputs) >= 0.5\n        correct += (preds == labels.bool()).sum().item()\n        total += labels.size(0)\n\navg_val_loss = val_loss / len(val_loader)\nval_accuracy = correct / total * 100\n\nprint(f\"Val Loss: {avg_val_loss:.4f} | Val Acc: {val_accuracy:.2f}%\")\n\nmainNet.train()\nauxNet.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:04:15.018817Z","iopub.execute_input":"2025-04-23T15:04:15.019344Z","iopub.status.idle":"2025-04-23T15:04:31.562815Z","shell.execute_reply.started":"2025-04-23T15:04:15.019323Z","shell.execute_reply":"2025-04-23T15:04:31.562107Z"}},"outputs":[{"name":"stdout","text":"Val Loss: 2.6453 | Val Acc: 77.44%\n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"AuxNet(\n  (layers): ModuleList(\n    (0): Conv2d(3, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (1): LeakyReLU(negative_slope=0.2)\n    (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (3): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (4): LeakyReLU(negative_slope=0.2)\n    (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (6): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (7): LeakyReLU(negative_slope=0.2)\n    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (9): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (10): LeakyReLU(negative_slope=0.2)\n    (11): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (12): Flatten(start_dim=1, end_dim=-1)\n    (13): Linear(in_features=16384, out_features=1024, bias=True)\n    (14): LeakyReLU(negative_slope=0.2)\n    (15): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (16): Linear(in_features=1024, out_features=1, bias=True)\n  )\n)"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"torch.save(mainNet.state_dict(), \"main_net.pth\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:04:42.464541Z","iopub.execute_input":"2025-04-23T15:04:42.464822Z","iopub.status.idle":"2025-04-23T15:04:42.613510Z","shell.execute_reply.started":"2025-04-23T15:04:42.464802Z","shell.execute_reply":"2025-04-23T15:04:42.612958Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"torch.save(auxNet.state_dict(), \"main_net.pth\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-23T15:04:58.911182Z","iopub.execute_input":"2025-04-23T15:04:58.911817Z","iopub.status.idle":"2025-04-23T15:04:59.135213Z","shell.execute_reply.started":"2025-04-23T15:04:58.911795Z","shell.execute_reply":"2025-04-23T15:04:59.134643Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}